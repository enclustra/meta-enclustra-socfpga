From 60ad73a800d701632b9df1ee1efb3c87b4be3583 Mon Sep 17 00:00:00 2001
From: andreasbuerkler <buerkler@gmail.com>
Date: Tue, 12 Dec 2023 11:44:04 +0000
Subject: [PATCH] Make intel scripts python 3 compatible

---
 .../cv_bsp_generator/cv_bsp_generator.py         | 10 +++++-----
 arch/arm/mach-socfpga/cv_bsp_generator/emif.py   |  2 +-
 arch/arm/mach-socfpga/cv_bsp_generator/hps.py    | 16 ++++++++--------
 arch/arm/mach-socfpga/cv_bsp_generator/iocsr.py  |  2 +-
 .../mach-socfpga/cv_bsp_generator/renderer.py    | 12 ++++++------
 .../mach-socfpga/cv_bsp_generator/streamer.py    | 12 ++++++------
 6 files changed, 27 insertions(+), 27 deletions(-)

diff --git a/arch/arm/mach-socfpga/cv_bsp_generator/cv_bsp_generator.py b/arch/arm/mach-socfpga/cv_bsp_generator/cv_bsp_generator.py
index aff597d397..320c675ccd 100755
--- a/arch/arm/mach-socfpga/cv_bsp_generator/cv_bsp_generator.py
+++ b/arch/arm/mach-socfpga/cv_bsp_generator/cv_bsp_generator.py
@@ -26,13 +26,13 @@ import sys
 
 def printUsage():
     """ usage string """
-    print ("Usage:\n\t%s\n" % ("sys.argv[0], --input_dir=<path to iswinfo directory> --output_dir=<path store output files>"))
+    print(("Usage:\n\t%s\n" % ("sys.argv[0], --input_dir=<path to iswinfo directory> --output_dir=<path store output files>")))
     exit(1)
 
 def verifyInputDir(dir):
     """ check if the input directory exists """
     if not os.path.isdir(dir):
-        print ("There is no such directory '%s'!\n" % (dir))
+        print(("There is no such directory '%s'!\n" % (dir)))
         exit(1)
 
 def verifyOutputDir(dir):
@@ -58,7 +58,7 @@ if __name__ == '__main__':
     (options, args) = optParser.parse_args()
 
     for arg in args:
-        print ("***WARNING: I don't understand '%s', so I am ignoring it\n" % (arg))
+        print(("***WARNING: I don't understand '%s', so I am ignoring it\n" % (arg)))
 
     inputDir = options.inputDir
     verifyInputDir(inputDir)
@@ -70,7 +70,7 @@ if __name__ == '__main__':
     hps = hps.HPSGrokker(inputDir, outputDir)
 
     pllConfigH = outputDir + "/" + "pll_config.h"
-    print ("Generating file: " + pllConfigH)
+    print(("Generating file: " + pllConfigH))
     hpsModel = model.hps.create(inputDir + "/" + "hps.xml")
     emifModel = model.emif.create(inputDir +"/" + "emif.xml")
 
@@ -90,7 +90,7 @@ if __name__ == '__main__':
         print ("          Only the last .hiof file in the list will be converted")
         print ("          hiof files found:")
         for f in hiof_list:
-            print ("              " + f)
+            print(("              " + f))
 
     for hiof_file_path in hiof_list:
         hiof_file = os.path.basename(hiof_file_path)
diff --git a/arch/arm/mach-socfpga/cv_bsp_generator/emif.py b/arch/arm/mach-socfpga/cv_bsp_generator/emif.py
index 84f7817c54..3c48643148 100755
--- a/arch/arm/mach-socfpga/cv_bsp_generator/emif.py
+++ b/arch/arm/mach-socfpga/cv_bsp_generator/emif.py
@@ -341,7 +341,7 @@ class EMIFGrokker(object):
         # Get a list of all nodes with the emif element name
         emifNodeList = self.emifDom.getElementsByTagName('emif')
         if len(emifNodeList) > 1:
-            print ("*** WARNING:" + "Multiple emif Elements found in %s!" % self.emifFileName)
+            print(("*** WARNING:" + "Multiple emif Elements found in %s!" % self.emifFileName))
         # For each of the emif element nodes, go through the child list
         # Note that currently there is only one emif Element
         # but this code will handle more than one emif node
diff --git a/arch/arm/mach-socfpga/cv_bsp_generator/hps.py b/arch/arm/mach-socfpga/cv_bsp_generator/hps.py
index 233900bf2e..673e8de8bb 100755
--- a/arch/arm/mach-socfpga/cv_bsp_generator/hps.py
+++ b/arch/arm/mach-socfpga/cv_bsp_generator/hps.py
@@ -411,7 +411,7 @@ class HPSGrokker(object):
                     configNode = xmlgrok.nextElementSibling(configNode)
                     if configNode == None:
                         newLine += newLine
-                    self.pinmuxConfigBuffer.write("#define " + unicode(config_define_name) + ' ' + '(' + str(config_define_value) + ')' + newLine)
+                    self.pinmuxConfigBuffer.write("#define " + str(config_define_name) + ' ' + '(' + str(config_define_value) + ')' + newLine)
 
                 entry = self.pinmux_configs[name]
                 define_name = entry['name']
@@ -436,7 +436,7 @@ class HPSGrokker(object):
     def handleHPSPinmuxesNode(self, pinmuxesNode):
         """ PinmuxesNode is a list of pinmuxNodes
         """
-        self.pinmuxHeaderBuffer.write( unicode("const u8 sys_mgr_init_table[] = {\n"))
+        self.pinmuxHeaderBuffer.write( str("const u8 sys_mgr_init_table[] = {\n"))
 
         pinmuxNode = xmlgrok.firstElementChild(pinmuxesNode)
         while pinmuxNode != None:
@@ -449,15 +449,15 @@ class HPSGrokker(object):
 
         reg_count = 0
         pinmux_regs_count = len(self.pinmux_regs)
-        for reg, value in self.pinmux_regs.items():
+        for reg, value in list(self.pinmux_regs.items()):
             reg_count += 1
             if reg_count < pinmux_regs_count:
-                self.pinmuxHeaderBuffer.write( unicode("\t" + str(value) + ', /* ' + reg + ' */\n' ))
+                self.pinmuxHeaderBuffer.write( str("\t" + str(value) + ', /* ' + reg + ' */\n' ))
             else:
-                self.pinmuxHeaderBuffer.write( unicode("\t" + str(value) + ' /* ' + reg + ' */\n' ))
+                self.pinmuxHeaderBuffer.write( str("\t" + str(value) + ' /* ' + reg + ' */\n' ))
 
         # Write the close of the pin MUX array in the header
-        self.pinmuxHeaderBuffer.write( unicode("};" ))
+        self.pinmuxHeaderBuffer.write( str("};" ))
 
     def handleHPSClockNode(self, clockNode):
         """ A clockNode may emit a #define for the name, frequency pair
@@ -512,7 +512,7 @@ class HPSGrokker(object):
         # Get a list of all nodes with the hps element name
         hpsNodeList = self.dom.getElementsByTagName('hps')
         if len(hpsNodeList) > 1:
-            print ("*** WARNING:" + "Multiple hps Elements found in %s!" % self.hpsInFileName)
+            print(("*** WARNING:" + "Multiple hps Elements found in %s!" % self.hpsInFileName))
         # For each of the hps element nodes, go through the child list
         # Note that currently there is only one hps Element
         # but this code will handle more than one hps node
@@ -534,7 +534,7 @@ class HPSGrokker(object):
                 elif childNode.nodeName == 'peripherals':
                     self.handleHPSPeripheralNode(childNode)
                 else:
-                    print '***Error:Found unexpected HPS child node:%s' % childNode.nodeName
+                    print('***Error:Found unexpected HPS child node:%s' % childNode.nodeName)
                 childNode = xmlgrok.nextElementSibling(childNode)
 
         self.updateTemplate("DERIVED_DEVICE_FAMILY", self.derivedDeviceFamily)
diff --git a/arch/arm/mach-socfpga/cv_bsp_generator/iocsr.py b/arch/arm/mach-socfpga/cv_bsp_generator/iocsr.py
index e2bd76f35b..6ef53de5bc 100755
--- a/arch/arm/mach-socfpga/cv_bsp_generator/iocsr.py
+++ b/arch/arm/mach-socfpga/cv_bsp_generator/iocsr.py
@@ -90,7 +90,7 @@ class IOCSRGrokker(object):
     def verifyRead(self, tagWeRead, tagWeExpected):
         """ verify the hiof value with tag expected """
         if tagWeRead != tagWeExpected:
-            print ("***Error: Expected ptag of %02d, but got %02d" % (tagWeExpected, tagWeRead))
+            print(("***Error: Expected ptag of %02d, but got %02d" % (tagWeExpected, tagWeRead)))
 
     def createFilesFromHIOF(self):
         """ read the hiof file to create iocsr_config.h """
diff --git a/arch/arm/mach-socfpga/cv_bsp_generator/renderer.py b/arch/arm/mach-socfpga/cv_bsp_generator/renderer.py
index 5f434b201c..727b5729f6 100755
--- a/arch/arm/mach-socfpga/cv_bsp_generator/renderer.py
+++ b/arch/arm/mach-socfpga/cv_bsp_generator/renderer.py
@@ -58,7 +58,7 @@ class pll_config_h:
         paramMap["VCO_DENOM"] = "main_pll_n"
         paramMap["VCO_NUMER"] = "main_pll_m"
 
-        for key in paramMap.keys():
+        for key in list(paramMap.keys()):
             id = "CFG_HPS_MAINPLLGRP_" + key
             value = self.hpsModel.getSystemConfig(paramMap[key])
             doc.c_source.define(self.doc, id,  value )
@@ -83,7 +83,7 @@ class pll_config_h:
         paramMap["L4SRC_L4MP"] = "l4_mp_clk_source"
         paramMap["L4SRC_L4SP"] = "l4_sp_clk_source"
 
-        for key in paramMap.keys():
+        for key in list(paramMap.keys()):
             id = "CFG_HPS_MAINPLLGRP_" + key
             value = self.hpsModel.getSystemConfig(paramMap[key])
             doc.c_source.define(self.doc, id, value )
@@ -109,7 +109,7 @@ class pll_config_h:
         paramMap["SRC_NAND"] = "nand_clk_source"
         paramMap["SRC_QSPI"] = "qspi_clk_source"
 
-        for key in paramMap.keys():
+        for key in list(paramMap.keys()):
             id = "CFG_HPS_PERPLLGRP_" + key
             value = self.hpsModel.getSystemConfig(paramMap[key])
             doc.c_source.define(self.doc, id, value )
@@ -147,7 +147,7 @@ class pll_config_h:
         paramMap["MAINVCO"] = "main_pll_vco_hz"
         paramMap["PERVCO"] = "periph_pll_vco_hz"
 
-        for key in paramMap.keys():
+        for key in list(paramMap.keys()):
             id = "CFG_HPS_CLK_" + key + "_HZ"
             value = self.hpsModel.getSystemConfig(paramMap[key])
             doc.c_source.define(self.doc, id, value )
@@ -173,7 +173,7 @@ class pll_config_h:
         paramMap["L4_MP"] = "l4_mp_clk_hz"
         paramMap["L4_SP"] = "l4_sp_clk_hz"
 
-        for key in paramMap.keys():
+        for key in list(paramMap.keys()):
             id = "CFG_HPS_CLK_" + key + "_HZ"
             value = self.hpsModel.getSystemConfig(paramMap[key])
             doc.c_source.define(self.doc, id, value )
@@ -185,7 +185,7 @@ class pll_config_h:
         paramMap["MAINCLK"] = "main_pll_c1_internal"
         paramMap["DBGATCLK"] = "main_pll_c2_internal"
 
-        for key in paramMap.keys():
+        for key in list(paramMap.keys()):
             id = "CFG_HPS_ALTERAGRP_" + key
             value = self.hpsModel.getSystemConfig(paramMap[key])
             doc.c_source.define(self.doc, id, value )
diff --git a/arch/arm/mach-socfpga/cv_bsp_generator/streamer.py b/arch/arm/mach-socfpga/cv_bsp_generator/streamer.py
index 19c30aced6..13f596857c 100755
--- a/arch/arm/mach-socfpga/cv_bsp_generator/streamer.py
+++ b/arch/arm/mach-socfpga/cv_bsp_generator/streamer.py
@@ -35,16 +35,16 @@ class Streamer(object):
         if self.fileName != None:
             if self.file == None:
                 if self.fileMode == 'write':
-                    print ("Generating file: %s..." % self.fileName)
+                    print(("Generating file: %s..." % self.fileName))
                 else:
-                    print ("Reading file: %s..." % self.fileName)
+                    print(("Reading file: %s..." % self.fileName))
                 self.file = open(self.fileName, self.mode)
 
     def read(self, numBytes):
         """ file read number of bytes """
         if self.file == None:
-            print ("***Error: Attempted to read from unopened file %s" \
-                  % (self.fileName))
+            print(("***Error: Attempted to read from unopened file %s" \
+                  % (self.fileName)))
             exit(-1)
 
         else:
@@ -70,8 +70,8 @@ class Streamer(object):
     def write(self, str):
         """ file write """
         if self.file == None:
-            print ("***Error: Attempted to write to unopened file %s" \
-                % (self.fileName))
+            print(("***Error: Attempted to write to unopened file %s" \
+                % (self.fileName)))
             exit(-1)
 
         else:
-- 
2.34.1

