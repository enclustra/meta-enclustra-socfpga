From ed5df1c1944e843d3940c48aabee626a2391a3b9 Mon Sep 17 00:00:00 2001
From: Lothar Rubusch <lothar.rubusch@enclustra.com>
Date: Fri, 24 Nov 2023 10:14:09 +0000
Subject: [PATCH 7/8] Add SI5338 configuration

Signed-off-by: Andreas Buerkler <andreas.buerkler@enclustra.com>
Signed-off-by: Lothar Rubusch <lothar.rubusch@enclustra.com>
---
 board/enclustra/mercury_aa1/mercury_aa1.c |   4 +
 drivers/misc/Kconfig                      |   6 +
 drivers/misc/Makefile                     |   1 +
 drivers/misc/si5338_config.c              | 161 ++++++++++++++++++++++
 drivers/misc/si5338_config.h              |  12 ++
 include/enclustra/si5338_config.h         |   7 +
 6 files changed, 191 insertions(+)
 create mode 100644 drivers/misc/si5338_config.c
 create mode 100644 drivers/misc/si5338_config.h
 create mode 100644 include/enclustra/si5338_config.h

diff --git a/board/enclustra/mercury_aa1/mercury_aa1.c b/board/enclustra/mercury_aa1/mercury_aa1.c
index 3bba96c3c0..47a8c59aa1 100644
--- a/board/enclustra/mercury_aa1/mercury_aa1.c
+++ b/board/enclustra/mercury_aa1/mercury_aa1.c
@@ -12,6 +12,7 @@
 #include <asm-generic/gpio.h>
 #include <asm/io.h>
 #include <enclustra/eeprom-mac.h>
+#include <enclustra/si5338_config.h>
 
 /* Enclustra vendor ID */
 #define ENCLUSTRA_MAC               0xF7B020
@@ -114,6 +115,9 @@ int configure_mac(void)
 
 int board_late_init(void)
 {
+#ifdef CONFIG_SI5338_CONFIGURATION
+	si5338_init();
+#endif
 	int ret;
 	ret = configure_mac();
 	return ret;
diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 0643c7ab9b..a17a53e759 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -83,6 +83,12 @@ config ENCLUSTRA_EEPROM_MAC
 	  Reads the MAC address out of the EEPROM and configures the MAC
 	  Addresses in the environment.
 
+config SI5338_CONFIGURATION
+        bool "Configure SI5338"
+	depends on MISC
+        help
+          Configure SI5338 clock generator device
+
 config GATEWORKS_SC
 	bool "Gateworks System Controller Support"
 	depends on MISC
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 938f1a76f1..615bcb5b3d 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -36,6 +36,7 @@ obj-$(CONFIG_ATSHA204A) += atsha204a-i2c.o
 obj-$(CONFIG_CBMEM_CONSOLE) += cbmem_console.o
 obj-$(CONFIG_DS4510)  += ds4510.o
 obj-$(CONFIG_ENCLUSTRA_EEPROM_MAC) += eeprom-mac.o
+obj-$(CONFIG_SI5338_CONFIGURATION) += si5338_config.o
 obj-$(CONFIG_FSL_DEVICE_DISABLE) += fsl_devdis.o
 obj-$(CONFIG_FSL_IFC) += fsl_ifc.o
 obj-$(CONFIG_FSL_IIM) += fsl_iim.o
diff --git a/drivers/misc/si5338_config.c b/drivers/misc/si5338_config.c
new file mode 100644
index 0000000000..3c4579f8bc
--- /dev/null
+++ b/drivers/misc/si5338_config.c
@@ -0,0 +1,161 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2022 Enclustra GmbH
+ * <info@enclustra.com>
+ */
+
+#include <i2c.h>
+#include <linux/delay.h>
+#include "si5338_config.h"
+#include "Si5338-RevB-Registers.h"
+
+int i2c_write_simple(struct udevice *dev, u8 addr, u8 data)
+{
+        unsigned char buf[1];
+        buf[0] = data;
+        if (dm_i2c_write(dev, addr, buf, 1) != 0) {
+                printf("SI5338 I2C write failed: %02x, %02x\n", addr, data);
+                return -1;
+        }
+        return 0;
+}
+
+int i2c_write_masked(struct udevice *dev, u8 addr, u8 data, u8 mask)
+{
+        if (mask == 0x00) return 0;
+        if (mask == 0xff) return i2c_write_simple(dev, addr, data);
+
+        unsigned char buf[1];
+        if (dm_i2c_read(dev, addr, buf, 1) != 0) {
+                printf("SI5338 I2C read failed\n");
+                return -1;
+        }
+        buf[0] &= ~mask;
+        buf[0] |= data & mask;
+        if (dm_i2c_write(dev, addr, buf, 1) != 0) {
+                printf("SI5338 I2C write failed: %02x, %02x, %02x\n", addr, data, mask);
+                return -1;
+        }
+        return 0;
+}
+
+int si5338_init(void)
+{
+        unsigned char buf[1];
+        struct udevice *dev;
+
+        if (i2c_get_chip_for_busnum(0, 0x70, 1, &dev) != 0) {
+                printf("SI5338 I2C init failed\n");
+                return -1;
+        }
+
+        // set page to 0
+        if (i2c_write_simple(dev, 255, 0x00)) {
+                return -1;
+        }
+
+        // disable outputs
+        if (i2c_write_masked(dev, 230, 0x10, 0x10)) {
+                return -1;
+        }
+
+        // pause lol
+        if (i2c_write_masked(dev, 241, 0x80, 0x80)) {
+                return -1;
+        }
+
+        // write new configuration
+        for (int i=0; i<NUM_REGS_MAX; i++) {
+                if (i2c_write_masked(dev, Reg_Store[i].Reg_Addr, Reg_Store[i].Reg_Val, Reg_Store[i].Reg_Mask)) {
+                        return -1;
+                }
+        }
+
+        // validate input clock status
+        do {
+                if (dm_i2c_read(dev, 218, buf, 1) != 0) {
+                        printf("SI5338 I2C read failed\n");
+                        return -1;
+                }
+        }
+        while ((buf[0] & 0x04) != 0);
+
+        // configure PLL for locking
+        if (i2c_write_masked(dev, 49, 0, 0x80)) {
+                return -1;
+        }
+
+        // initiate locking of PLL
+        if (i2c_write_simple(dev, 246, 0x02)) {
+                return -1;
+        }
+
+        // wait 25ms (100ms to be on the safe side)
+        mdelay(100);
+
+        // restart lol
+        if (i2c_write_masked(dev, 241, 0x65, 0xff)) {
+                return -1;
+        }
+
+        // confirm PLL lock status
+        int try = 0;
+        do {
+                if (dm_i2c_read(dev, 218, buf, 1) != 0) {
+                        printf("SI5338 I2C read failed\n");
+                        return -1;
+                }
+                mdelay(100);
+                try++;
+                if (try > 10) {
+                    printf("SI5338 PLL is not locking\n");
+                    return -1;
+                }
+        }
+        while ((buf[0] & 0x15) != 0);
+
+        // copy fcal values to active registers
+        if (dm_i2c_read(dev, 237, buf, 1) != 0) {
+                printf("SI5338 I2C failed\n");
+                return -1;
+        }
+        if (i2c_write_masked(dev, 47, buf[0], 0x03)) {
+                return -1;
+        }
+
+        if (dm_i2c_read(dev, 236, buf, 1) != 0) {
+                printf("SI5338 I2C failed\n");
+                return -1;
+        }
+        if (i2c_write_masked(dev, 46, buf[0], 0xFF)) {
+                return -1;
+        }
+
+        if (dm_i2c_read(dev, 235, buf, 1) != 0) {
+                printf("SI5338 I2C failed\n");
+                return -1;
+        }
+        if (i2c_write_simple(dev, 45, buf[0])) {
+                return -1;
+        }
+
+        if (i2c_write_masked(dev, 47, 0x14, 0xFC)) {
+                return -1;
+        }
+
+        // set PLL to use FCAL values
+        if (i2c_write_masked(dev, 49, 0x80, 0x80)) {
+                return -1;
+        }
+
+        // enable outputs
+        if (i2c_write_simple(dev, 230, 0x00)) {
+                return -1;
+        }
+
+        printf("SI5338 init successful\n");
+
+        return 0;
+};
+
+EXPORT_SYMBOL_GPL(si5338_init);
diff --git a/drivers/misc/si5338_config.h b/drivers/misc/si5338_config.h
new file mode 100644
index 0000000000..54a538b0a0
--- /dev/null
+++ b/drivers/misc/si5338_config.h
@@ -0,0 +1,12 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2022 Enclustra GmbH
+ * <info@enclustra.com>
+ */
+
+#ifndef __SI5338_INIT_H
+#define __SI5338_INIT_H
+
+int si5338_init(void);
+
+#endif
diff --git a/include/enclustra/si5338_config.h b/include/enclustra/si5338_config.h
new file mode 100644
index 0000000000..d88483849f
--- /dev/null
+++ b/include/enclustra/si5338_config.h
@@ -0,0 +1,7 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * (C) Copyright 2023 Enclustra GmbH
+ * <info@enclustra.com>
+ */
+
+int si5338_init(void);
-- 
2.34.1

