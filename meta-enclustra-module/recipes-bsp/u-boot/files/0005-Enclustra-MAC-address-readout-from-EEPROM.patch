From 36f0e071e02b7a282a2f701b93a2957a920ce696 Mon Sep 17 00:00:00 2001
From: Lothar Rubusch <lothar.rubusch@enclustra.com>
Date: Fri, 24 Nov 2023 09:59:28 +0000
Subject: [PATCH 5/8] Enclustra MAC address readout from EEPROM

Introduce the Enclustra EEPROM MAC setup. Apply AT-SHA204
wakeup fix.

Signed-off-by: Andreas Buerkler <andreas.buerkler@enclustra.com>
Signed-off-by: Lothar Rubusch <lothar.rubusch@enclustra.com>
---
 board/enclustra/mercury_aa1/mercury_aa1.c | 66 +++++++++++++++
 drivers/misc/Kconfig                      |  8 ++
 drivers/misc/Makefile                     |  1 +
 drivers/misc/atsha204a-i2c.c              | 13 +--
 drivers/misc/eeprom-mac.c                 | 98 +++++++++++++++++++++++
 include/enclustra/eeprom-mac.h            | 14 ++++
 6 files changed, 195 insertions(+), 5 deletions(-)
 create mode 100644 drivers/misc/eeprom-mac.c
 create mode 100644 include/enclustra/eeprom-mac.h

diff --git a/board/enclustra/mercury_aa1/mercury_aa1.c b/board/enclustra/mercury_aa1/mercury_aa1.c
index 97ca3c42cb..d211dae7a5 100644
--- a/board/enclustra/mercury_aa1/mercury_aa1.c
+++ b/board/enclustra/mercury_aa1/mercury_aa1.c
@@ -11,6 +11,7 @@
 #include <dm/uclass.h>
 #include <asm-generic/gpio.h>
 #include <asm/io.h>
+#include <enclustra/eeprom-mac.h>
 
 /* Enclustra vendor ID */
 #define ENCLUSTRA_MAC               0xF7B020
@@ -35,6 +36,10 @@ static int altera_current_storage = ALTERA_NONE;
 
 #endif
 
+static struct eeprom_mem eeproms[] = {
+	{ .mac_reader = atsha204_get_mac },
+};
+
 int configure_mac(void)
 {
 	int i;
@@ -43,6 +48,67 @@ int configure_mac(void)
 	char hwaddr_str[18];
 	bool hwaddr_set = false;
 
+#ifdef CONFIG_ENCLUSTRA_EEPROM_MAC
+
+	if (env_get("ethaddr")) {
+		/* Address is already set */
+		return 0;
+	}
+
+	for (i = 0; i < ARRAY_SIZE(eeproms); i++) {
+		if (eeproms[i].mac_reader(hwaddr))
+			continue;
+
+		/* Check if the value is a valid mac registered for
+		 * Enclustra  GmbH
+		 */
+		hwaddr_h = hwaddr[0] | hwaddr[1] << 8 | hwaddr[2] << 16;
+		if ((hwaddr_h & 0xFFFFFF) != ENCLUSTRA_MAC)
+			continue;
+
+		/* Format the address using a string */
+		sprintf(hwaddr_str,
+			"%02X:%02X:%02X:%02X:%02X:%02X",
+			hwaddr[0],
+			hwaddr[1],
+			hwaddr[2],
+			hwaddr[3],
+			hwaddr[4],
+			hwaddr[5]);
+
+		/* Set the actual env variable */
+		env_set("ethaddr", hwaddr_str);
+
+		/* increment MAC addr */
+		hwaddr_h = (hwaddr[3] << 16) | (hwaddr[4] << 8) | hwaddr[5];
+		hwaddr_h = (hwaddr_h + 1) & 0xFFFFFF;
+		hwaddr[3] = (hwaddr_h >> 16) & 0xFF;
+		hwaddr[4] = (hwaddr_h >> 8) & 0xFF;
+		hwaddr[5] = hwaddr_h & 0xFF;
+
+		/* Format the address using a string */
+		sprintf(hwaddr_str,
+			"%02X:%02X:%02X:%02X:%02X:%02X",
+			hwaddr[0],
+			hwaddr[1],
+			hwaddr[2],
+			hwaddr[3],
+			hwaddr[4],
+			hwaddr[5]);
+
+		/* Set the actual env variable */
+		env_set("eth1addr", hwaddr_str);
+
+		hwaddr_set = true;
+		break;
+	}
+
+	if (!hwaddr_set) {
+		env_set("ethaddr", ENCLUSTRA_ETHADDR_DEFAULT);
+		env_set("eth1addr", ENCLUSTRA_ETH1ADDR_DEFAULT);
+	}
+
+#endif
 	return 0;
 }
 
diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index d9da836675..0643c7ab9b 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -75,6 +75,14 @@ config ATSHA204A
 	   CryptoAuthentication module found for example on the Turris Omnia
 	   board.
 
+config ENCLUSTRA_EEPROM_MAC
+	bool "Configure Enclustra MAC address"
+	depends on MISC
+	select ATSHA204A
+	help
+	  Reads the MAC address out of the EEPROM and configures the MAC
+	  Addresses in the environment.
+
 config GATEWORKS_SC
 	bool "Gateworks System Controller Support"
 	depends on MISC
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 183d92b6e0..938f1a76f1 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -35,6 +35,7 @@ obj-$(CONFIG_ALTERA_SYSID) += altera_sysid.o
 obj-$(CONFIG_ATSHA204A) += atsha204a-i2c.o
 obj-$(CONFIG_CBMEM_CONSOLE) += cbmem_console.o
 obj-$(CONFIG_DS4510)  += ds4510.o
+obj-$(CONFIG_ENCLUSTRA_EEPROM_MAC) += eeprom-mac.o
 obj-$(CONFIG_FSL_DEVICE_DISABLE) += fsl_devdis.o
 obj-$(CONFIG_FSL_IFC) += fsl_ifc.o
 obj-$(CONFIG_FSL_IIM) += fsl_iim.o
diff --git a/drivers/misc/atsha204a-i2c.c b/drivers/misc/atsha204a-i2c.c
index d3c515828f..2edcf2d85e 100644
--- a/drivers/misc/atsha204a-i2c.c
+++ b/drivers/misc/atsha204a-i2c.c
@@ -94,7 +94,7 @@ static int atsha204a_recv_resp(struct udevice *dev,
 
 int atsha204a_wakeup(struct udevice *dev)
 {
-	u8 req[4];
+	u8 buf = 0;
 	struct atsha204a_resp resp;
 	int try, res;
 
@@ -106,10 +106,13 @@ int atsha204a_wakeup(struct udevice *dev)
 		/*
 		 * The device ignores any levels or transitions on the SCL pin
 		 * when the device is idle, asleep or during waking up.
-		 * Don't check for error when waking up the device.
 		 */
-		memset(req, 0, 4);
-		atsha204a_send(dev, req, 4);
+		struct i2c_msg msg;
+		msg.addr = 0;
+		msg.flags = I2C_M_NOSTART | I2C_M_IGNORE_NAK;
+		msg.len = 1;
+		msg.buf = &buf;
+		dm_i2c_xfer(dev, &msg, 1);
 
 		udelay(ATSHA204A_TWLO_US + ATSHA204A_TWHI_US);
 
@@ -146,7 +149,7 @@ int atsha204a_idle(struct udevice *dev)
 int atsha204a_sleep(struct udevice *dev)
 {
 	int res;
-	u8 req = ATSHA204A_FUNC_IDLE;
+	u8 req = ATSHA204A_FUNC_SLEEP;
 
 	res = atsha204a_send(dev, &req, 1);
 	if (res)
diff --git a/drivers/misc/eeprom-mac.c b/drivers/misc/eeprom-mac.c
new file mode 100644
index 0000000000..e4d737b339
--- /dev/null
+++ b/drivers/misc/eeprom-mac.c
@@ -0,0 +1,98 @@
+#include <common.h>
+#include <linux/compat.h>
+#include <dm.h>
+#include <i2c.h>
+#include <enclustra/eeprom-mac.h>
+#include <atsha204a-i2c.h>
+
+static int i2c_get_device(uint chip_addr, int alen, struct udevice **devp)
+{
+	struct dm_i2c_chip *chip;
+	int ret;
+
+	ret = i2c_get_chip_for_busnum(DS28_SYS_I2C_EEPROM_BUS, chip_addr,
+			alen, devp);
+	if (ret)
+		return ret;
+
+	chip = dev_get_parent_plat(*devp);
+	if (chip->offset_len != alen) {
+		printf("I2C chip %x: requested alen %d does not match chip "
+			"offset_len %d\n", chip_addr, alen, chip->offset_len);
+		return -EADDRNOTAVAIL;
+	}
+
+	return 0;
+}
+
+static struct udevice *get_atsha204a_dev(void)
+{
+	static struct udevice *dev;
+
+	if (uclass_get_device_by_name(UCLASS_MISC, "atsha204a@64", &dev)) {
+		debug("Cannot find ATSHA204A on I2C bus!\n");
+		dev = NULL;
+	}
+
+	return dev;
+}
+
+int ds28_get_mac(u8 *buffer)
+{
+	int ret;
+	struct udevice *dev;
+
+	ret = i2c_get_device(DS28_I2C_ADDR, 1, &dev);
+	if (ret != 0)
+		return ret;
+
+	return dm_i2c_read(dev,
+			0x10,
+			buffer,
+			6);
+}
+EXPORT_SYMBOL_GPL(ds28_get_mac);
+
+int atsha204_get_mac(u8 *buffer)
+{
+	int ret;
+	u8 data[4];
+	u8 i;
+	struct udevice *dev = get_atsha204a_dev();
+
+	if (!dev)
+		return -ENODEV;
+
+#ifdef CONFIG_ATSHA204A
+	/* We put the device to sleep first, to make sure it is in a defined state */
+	atsha204a_sleep(dev);
+	ret = atsha204a_wakeup(dev);
+
+	if (ret)
+		return ret;
+
+	ret = atsha204a_read(dev, ATSHA204A_ZONE_OTP, false,
+			     4, data);
+
+	if (ret) {
+		return ret;
+	} else {
+		for (i = 0; i < 4; i++)
+			buffer[i] = data[i];
+	}
+
+	ret = atsha204a_read(dev, ATSHA204A_ZONE_OTP, false,
+			     5, data);
+	if (ret) {
+		return ret;
+	} else {
+		buffer[4] = data[0];
+		buffer[5] = data[1];
+	}
+
+	atsha204a_sleep(dev);
+#endif
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(atsha204_get_mac);
diff --git a/include/enclustra/eeprom-mac.h b/include/enclustra/eeprom-mac.h
new file mode 100644
index 0000000000..1807b1bd4a
--- /dev/null
+++ b/include/enclustra/eeprom-mac.h
@@ -0,0 +1,14 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * (C) Copyright 2024 Enclustra GmbH
+ * <info@enclustra.com>
+ */
+#define DS28_I2C_ADDR 0x5C
+#define DS28_SYS_I2C_EEPROM_BUS 0
+
+struct eeprom_mem {
+    int (*mac_reader)(u8 *buffer);
+};
+
+int ds28_get_mac(u8 *buffer);
+int atsha204_get_mac(u8 *buffer);
-- 
2.34.1

