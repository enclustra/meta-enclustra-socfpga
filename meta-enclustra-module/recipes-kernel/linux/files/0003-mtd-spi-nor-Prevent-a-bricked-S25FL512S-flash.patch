From 696a04b1a33ea38f9a14e18667049dafb46c2408 Mon Sep 17 00:00:00 2001
From: Andreas Buerkler <andreas.buerkler@enclustra.com>
Date: Fri, 1 Dec 2023 12:33:47 +0100
Subject: [PATCH 5/5] mtd: spi-nor: Prevent a bricked S25FL512S flash

The block protection flags on S25FL512S QSPI flash devices can
be set accidentally when power is lost during a write command.
This modifications clears the protection flags, to made the
flash device writable.

Additionally the latency code bits are cleared to make sure the
boot process does not fail.

Signed-off-by: Andreas Buerkler <andreas.buerkler@enclustra.com>
---
 drivers/mtd/spi-nor/core.c | 52 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 52 insertions(+)

diff --git a/drivers/mtd/spi-nor/core.c b/drivers/mtd/spi-nor/core.c
index cda57cb86308..80d6b29bd183 100644
--- a/drivers/mtd/spi-nor/core.c
+++ b/drivers/mtd/spi-nor/core.c
@@ -2694,6 +2694,50 @@ static int spi_nor_quad_enable(struct spi_nor *nor)
 	return nor->params->quad_enable(nor);
 }
 
+static int spi_nor_clear_protection(struct spi_nor *nor)
+{
+	uint8_t *sr_cr = nor->bouncebuf;
+	uint8_t sr = 0;
+	uint8_t cr = 0;
+
+	int ret = spi_nor_read_sr(nor, &sr_cr[0]);
+	if (ret)
+		return ret;
+	sr = sr_cr[0];
+
+	ret = spi_nor_read_cr(nor, &sr_cr[1]);
+	if (ret)
+		return ret;
+	cr = sr_cr[1];
+
+	if (sr_cr[0] & 0x1c)
+	{
+		sr_cr[0] &= ~0x1c; // clear block protection
+		sr_cr[1] &= ~0xc0; // clear latency code bits
+
+		ret = spi_nor_write_sr(nor, sr_cr, 2);
+		if (ret)
+			return ret;
+
+		// read the written registers again to verify the content
+		ret = spi_nor_read_sr(nor, &sr_cr[0]);
+		if (ret)
+			return ret;
+
+		ret = spi_nor_read_cr(nor, &sr_cr[1]);
+		if (ret)
+			return ret;
+
+		dev_warn(nor->dev, "---------------- WARNING ---------------\n");
+		dev_warn(nor->dev, "QSPI flash block protection bits cleared\n");
+		dev_warn(nor->dev, "SR1 = %02x -> %02x\n", sr, sr_cr[0]);
+		dev_warn(nor->dev, "CR1 = %02x -> %02x\n", cr, sr_cr[1]);
+		dev_warn(nor->dev, "----------------------------------------\n");
+	}
+
+	return 0;
+}
+
 static int spi_nor_init(struct spi_nor *nor)
 {
 	int err;
@@ -2710,6 +2754,14 @@ static int spi_nor_init(struct spi_nor *nor)
 		return err;
 	}
 
+	if (strcmp(nor->info->name, "s25fl512s") == 0) {
+		err = spi_nor_clear_protection(nor);
+		if (err) {
+			dev_err(nor->dev, "clearing block protection flags failed\n");
+			return err;
+		}
+	}
+
 	/*
 	 * Some SPI NOR flashes are write protected by default after a power-on
 	 * reset cycle, in order to avoid inadvertent writes during power-up.
-- 
2.34.1

